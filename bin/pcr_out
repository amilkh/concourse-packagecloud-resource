#!/usr/bin/env ruby

require 'packagecloud'
require 'json'

if ARGV.length < 1
  STDERR.puts 'Too few arguments'
  exit 1
end

def get_version(distribution, package_file)
    "#{distribution}/#{package_file}"
end

def distributions()
    {
        "debian-jessie" => "debian/jessie",
        "debian-wheezy" => "debian/wheezy",
        "debian-stretch" => "debian/stretch",
        "ubuntu-14.04" => "ubuntu/trusty",
        "ubuntu-16.04" => "ubuntu/xenial",
        "ubuntu-16.10" => "ubuntu/yakkety",
        "centos-6" => "el/6",
        "fedora-24" => "fedora/24",
        "fedora-25" => "fedora/25",
        "fedora-26" => "fedora/26",
        "centos-7" => "el/7",
        "opensuse-leap-42.2" => "opensuse/42.2"
    }
end

work_dir = ARGV[0]

request = JSON.parse(STDIN.read)

source = request.fetch("source")
params = request.fetch("params")

username = source.fetch("username")
api_key = source.fetch("api_key")
repo = source.fetch("repo")

distribution_name = params.fetch("distribution_name")
package_file_glob = params.fetch("package_file_glob")

distribution = distributions[distribution_name]

if distribution == nil
    STDERR.puts "Distribution name not supported: #{distribution_name}"
    exit 1
end

package_file_location = Dir.glob([File.join(work_dir, package_file)]).first

if package_file_location == nil or not File.exists?(package_file_location)
    STDERR.puts "Package file #{package_file_glob} not found in directory #{work_dir}"
    exit 1
end

credentials = Packagecloud::Credentials.new(username, api_key)

@client = Packagecloud::Client.new(credentials)

package = Packagecloud::Package.new(:file => package_file_location)

result = @client.put_package(repo, package, distribution)

version = get_version(distribution, package_file)

if result.succeeded
    STDOUT.puts JSON.generate({
        version: version,
        metadata: [
            {name: "Filename",
             value: package_file},
            {name: "Package link",
             value: "https://packagecloud.io/#{username}/#{repo}/packages/#{distribution}/#{package_file}"}
        ]})
else
    STDERR.puts result.inspect
    exit 1
end


